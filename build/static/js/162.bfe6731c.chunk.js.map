{"version":3,"sources":["views/application/members/index.js","ui-component/cards/UserProfileCard.js"],"names":["headCells","id","numeric","label","align","EnhancedTableHead","onSelectAllClick","order","orderBy","numSelected","rowCount","onRequestSort","selected","TableHead","TableRow","TableCell","padding","sx","pl","Checkbox","color","indeterminate","checked","onChange","inputProps","colSpan","length","map","headCell","disablePadding","sortDirection","TableSortLabel","active","direction","onClick","property","event","Box","component","visuallyHidden","pr","EnhancedTableToolbar","Toolbar","p","theme","palette","secondary","main","Typography","variant","flexGrow","Tooltip","title","IconButton","size","fontSize","Members","useTheme","useContext","Context","state","dispatch","React","setOrder","setOrderBy","setSelected","page","setPage","rowsPerPage","setRowsPerPage","search","setSearch","rows","setRows","member","setMember","setMemberCertificate","navigate","useNavigate","viewMember","member_number","member_id","console","log","fetch","url","then","response","json","data","type","payload","concat","registration_certificate_picture","catch","error","useAuth","useState","members","setMembers","useEffect","a","requestOptions","method","redirect","res","membersData","handleClick","name","selectedIndex","indexOf","newSelected","slice","emptyRows","Math","max","MainCard","content","CardContent","Grid","container","justifyContent","alignItems","spacing","item","xs","sm","TextField","InputProps","startAdornment","InputAdornment","position","newString","target","value","newRows","filter","row","matches","containsQuery","forEach","toString","toLowerCase","includes","placeholder","textAlign","TableContainer","Table","minWidth","newSelectedId","n","TableBody","index","isItemSelected","labelId","hover","role","tabIndex","scope","last_name","cursor","mode","first_name","email","total_applications","is_active","Chip","chipcolor","Button","style","height","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","avatarImage","require","FacebookWrapper","styled","background","TwitterWrapper","LinkedInWrapper","UserProfileCard","avatar","profile","status","avatarProfile","default","imageProfile","dark","grey","border","borderColor","image","pb","gridSpacing","alt","src","width","m","bgcolor","fullWidth","startIcon"],"mappings":"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","file":"static/js/162.bfe6731c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport {\n    Link,\n    Box,\n    CardContent,\n    Checkbox,\n    Grid,\n    IconButton,\n    Button,\n    InputAdornment,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableSortLabel,\n    TextField,\n    Toolbar,\n    Tooltip,\n    Typography,\n    Modal\n} from '@mui/material';\nimport { visuallyHidden } from '@mui/utils';\n\n// project imports\nimport Chip from 'ui-component/extended/Chip';\nimport MainCard from 'ui-component/cards/MainCard';\nimport UserProfileCard from 'ui-component/cards/UserProfileCard';\nimport { useDispatch, useSelector } from 'store';\nimport { getCustomers } from 'store/slices/customer';\nimport { getApplications } from 'store/slices/application';\nimport { getMembers } from 'store/slices/member';\n\n// assets\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FilterListIcon from '@mui/icons-material/FilterListTwoTone';\nimport PrintIcon from '@mui/icons-material/PrintTwoTone';\nimport FileCopyIcon from '@mui/icons-material/FileCopyTwoTone';\nimport SearchIcon from '@mui/icons-material/Search';\nimport VisibilityTwoToneIcon from '@mui/icons-material/VisibilityTwoTone';\nimport EditTwoToneIcon from '@mui/icons-material/EditTwoTone';\nimport {useState, useEffect, useContext} from 'react'\nimport {Context} from 'store/store/Store'\nimport useAuth from 'hooks/useAuth';\nimport axios from 'utils/axios';\nimport { useNavigate } from \"react-router-dom\";\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  pt: 2,\n  px: 4,\n  pb: 3,\n};\n\n// table sort\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nconst getComparator = (order, orderBy) =>\n    order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n// 'payment_status', 'application_status', 'is_active'\n// table header options\nconst headCells = [\n    {\n        id: 'name',\n        numeric: false,\n        label: 'First Name',\n        align: 'left'\n    },\n    {\n        id: 'last_name',\n        numeric: true,\n        label: 'Last Name',\n        align: 'left'\n    },\n    {\n        id: 'email',\n        numeric: true,\n        label: 'Email',\n        align: 'left'\n    },\n    {\n        id: 'application_status',\n        numeric: true,\n        label: 'Applications Status',\n        align: 'right'\n    },\n    {\n        id: 'payment_status',\n        numeric: true,\n        label: 'Payment Status',\n        align: 'right'\n    },\n    {\n        id: 'is_active',\n        numeric: true,\n        label: 'Membership Status',\n        align: 'center'\n    }\n];\n\n// ==============================|| TABLE HEADER ||============================== //\n\nfunction EnhancedTableHead({ onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, selected }) {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\" sx={{ pl: 3 }}>\n                    <Checkbox\n                        color=\"primary\"\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{\n                            'aria-label': 'select all desserts'\n                        }}\n                    />\n                </TableCell>\n                {numSelected > 0 && (\n                    <TableCell padding=\"none\" colSpan={6}>\n                        <EnhancedTableToolbar numSelected={selected.length} />\n                    </TableCell>\n                )}\n                {numSelected <= 0  &&\n                    headCells.map((headCell) => (\n                        <TableCell\n                            key={headCell.id}\n                            align={headCell.align}\n                            padding={headCell.disablePadding ? 'none' : 'normal'}\n                            sortDirection={orderBy === headCell.id ? order : false}\n                        >\n                            <TableSortLabel\n                                active={orderBy === headCell.id}\n                                direction={orderBy === headCell.id ? order : 'asc'}\n                                onClick={createSortHandler(headCell.id)}\n                            >\n                                {headCell.label}\n                                {orderBy === headCell.id ? (\n                                    <Box component=\"span\" sx={visuallyHidden}>\n                                        {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                    </Box>\n                                ) : null}\n                            </TableSortLabel>\n                        </TableCell>\n                    ))}\n                {numSelected <= 0 && (\n                    <TableCell sortDirection={false} align=\"center\" sx={{ pr: 3 }}>\n                        Action\n                    </TableCell>\n                )}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    selected: PropTypes.array,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\n// ==============================|| TABLE HEADER TOOLBAR ||============================== //\n\nconst EnhancedTableToolbar = ({ numSelected }) => (\n    <Toolbar\n        sx={{\n            p: 0,\n            pl: 1,\n            pr: 1,\n            ...(numSelected > 0 && {\n                color: (theme) => theme.palette.secondary.main\n            })\n        }}\n    >\n        {numSelected > 0 ? (\n            <Typography color=\"inherit\" variant=\"h4\">\n                {numSelected} Selected\n            </Typography>\n        ) : (\n            <Typography variant=\"h6\" id=\"tableTitle\">\n                Members\n            </Typography>\n        )}\n        <Box sx={{ flexGrow: 1 }} />\n        {numSelected > 0 && (\n            <Tooltip title=\"Delete\">\n                <IconButton size=\"large\">\n                    <DeleteIcon fontSize=\"small\" />\n                </IconButton>\n            </Tooltip>\n        )}\n    </Toolbar>\n);\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ==============================|| CUSTOMER LIST ||============================== //\n\nconst Members = () => {\n    const theme = useTheme();\n    // const dispatch = useDispatch();\n    const [state, dispatch] = useContext(Context);\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [search, setSearch] = React.useState('');\n    const [rows, setRows] = React.useState([]);\n    // const { customers } = useSelector((state) => state.customer);\n    // const { applications } = useSelector((state) => state.application);\n    // const { members } = useSelector((state) => state.member);\n    const [open, setOpen] = React.useState(false);\n    const [memberID, setMemberID] = React.useState();\n    const [member, setMember] = React.useState(null);\n    const [memberCertificate, setMemberCertificate] = React.useState();\n    const [memberPracticeCertificate, setMemberPracticeCertificate] = React.useState();\n    const [memberProfileImage, setMemberProfileImage] = React.useState();\n    let navigate = useNavigate(); \n    \n    \n    const viewMember = (member_number) => {\n        // event.preventDefault();\n        console.log(member_number)\n        getMember(member_number);\n        let path = `/user/social-profile/:tab`; \n        if (member != null){\n            navigate(path);\n        }\n    };\n\n  const { url } = useAuth();\n\n  const [members, setMembers] = useState([])\n  \n  useEffect( async() => {\n    console.log('urls')\n\n    try {\n        dispatch({type: 'SET_MEMBER', payload: null});\n\n        var requestOptions = {\n            method: 'GET',\n            redirect: 'follow'\n          };\n        const res = await await fetch(`${url}/member/member-profile-list`, requestOptions)\n        const membersData = await res.json()\n        dispatch({type: 'SET_MEMBERS', payload: membersData});\n        setMembers(membersData)\n        setRows(members);\n        console.log('members state',state)\n\n    } catch (error) {\n        dispatch({type: 'SET_ERROR', payload: error});\n    }\n}, [])\n\nfunction getMember(member_id) {\n    if (member_id) {\n        console.log('data member_id 2')\n        console.log(member_id)\n        fetch(`${url}/member/member-profile-detail/${member_id}`)\n        .then(response => response.json())\n        .then(data => {\n            console.log('data member_id')\n            setMember(data)\n            dispatch({type: 'SET_MEMBER', payload: data});\n            console.log('state state member')\n            console.log(state.member)\n            setMemberCertificate(url.concat(data.registration_certificate_picture))\n            console.log(data)\n        })\n        .catch( error => console.log(error))\n    }\n\n\n}\n    const handleSearch = (event) => {\n        const newString = event?.target.value;\n        setSearch(newString || '');\n\n        if (newString) {\n            const newRows = rows.filter((row) => {\n                let matches = true;\n\n                const properties = ['image', 'first_name','last_name', 'email', 'payment_status', 'application_status', 'is_active'];\n                let containsQuery = false;\n\n                properties.forEach((property) => {\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\n                        containsQuery = true;\n                    }\n                });\n\n                if (!containsQuery) {\n                    matches = false;\n                }\n                return matches;\n            });\n            setRows(newRows);\n        } else {\n            setRows(members);\n        }\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = rows.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event?.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <MainCard title=\"Application List\" content={false}>\n            <CardContent>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon fontSize=\"small\" />\n                                    </InputAdornment>\n                                )\n                            }}\n                            onChange={handleSearch}\n                            placeholder=\"Search Members\"\n                            value={search}\n                            size=\"small\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6} sx={{ textAlign: 'right' }}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton size=\"large\">\n                                <FileCopyIcon />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print\">\n                            <IconButton size=\"large\">\n                                <PrintIcon />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Filter\">\n                            <IconButton size=\"large\">\n                                <FilterListIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            {/* table */}\n            <TableContainer>\n                <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\">\n                    <EnhancedTableHead\n                        theme={theme}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                        selected={selected}\n                    />\n                    <TableBody>\n                        {members.map((row, index) => {\n\n                                /** Make sure no display bugs if row isn't an OrderData object */\n                                if (typeof row === 'number') return null;\n                                const isItemSelected = isSelected(row.name);\n                                const labelId = `enhanced-table-checkbox-${index}`;\n                                console.log('row.name', row.name)\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        aria-checked={isItemSelected}\n                                        tabIndex={-1}\n                                        key={index}\n                                        selected={isItemSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\" sx={{ pl: 3 }} onClick={(event) => handleClick(event, row.title)}>\n                                            <Checkbox\n                                                color=\"primary\"\n                                                checked={isItemSelected}\n                                                inputProps={{\n                                                    'aria-labelledby': labelId\n                                                }}\n                                            />\n                                        </TableCell>\n                                        <TableCell\n                                            component=\"th\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            onClick={(event) => handleClick(event, row.last_name)}\n                                            sx={{ cursor: 'pointer' }}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{ color: theme.palette.mode === 'dark' ? 'grey.600' : 'grey.900' }}\n                                            >\n                                                {' '}\n                                                {row.first_name}{' '}\n                                            </Typography>\n                                            {/* <Typography variant=\"caption\"> {row.email} </Typography> */}\n                                        </TableCell>\n                                        <TableCell align=\"right\">{row.last_name}</TableCell>\n\n                                        <TableCell>{row.email}</TableCell>\n                                        <TableCell align=\"right\">{row.total_applications}</TableCell>\n                                        <TableCell align=\"center\">\n                                            {row.is_active ? <Chip label=\"Completed\" size=\"small\" chipcolor=\"success\" /> : <Chip label=\"Pending\" size=\"small\" chipcolor=\"orange\" />}\n                                            \n                                        </TableCell>\n                                        <TableCell align=\"center\">\n                                            {row.is_active ? <Chip label=\"Confirmed\" size=\"small\" chipcolor=\"success\" /> : <Chip label=\"No Payment Added\" size=\"small\" chipcolor=\"orange\" />}\n                                            \n                                        </TableCell>\n                                        <TableCell align=\"center\">\n                                            {row.is_active ? <Chip label=\"Active\" size=\"small\" chipcolor=\"success\" /> : <Chip label=\"Expired\" size=\"small\" chipcolor=\"orange\" />}\n                                            \n                                        </TableCell>\n                                        <TableCell align=\"center\" sx={{ pr: 3 }}>\n\n                                        <Button \n                                        type=\"submit\"\n                                        onClick={() => {viewMember(row.member_number)}} \n                                        color=\"primary\" size=\"large\">\n                                                <VisibilityTwoToneIcon sx={{ fontSize: '1.3rem' }} />\n                                        </Button>\n                                            \n                                            {/* <IconButton color=\"secondary\" size=\"large\">\n                                                <EditTwoToneIcon sx={{ fontSize: '1.3rem' }} />\n                                            </IconButton> */}\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows\n                                }}\n                            >\n                                <TableCell colSpan={6} />\n                                   {/* <IconButton color=\"primary\" size=\"large\">\n                                                <VisibilityTwoToneIcon sx={{ fontSize: '1.3rem' }} />\n                                            </IconButton> */}\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* table pagination */}\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n\n        </MainCard>\n    );\n};\n\nexport default Members;\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme, styled } from '@mui/material/styles';\r\nimport { Button, Card, CardContent, CardMedia, Chip, Grid, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport Avatar from '../extended/Avatar';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// assets\r\nimport FacebookIcon from '@mui/icons-material/Facebook';\r\nimport TwitterIcon from '@mui/icons-material/Twitter';\r\nimport LinkedInIcon from '@mui/icons-material/LinkedIn';\r\nimport ChatBubbleTwoToneIcon from '@mui/icons-material/ChatBubbleTwoTone';\r\n\r\nconst avatarImage = require.context('assets/images/profile', true);\r\n\r\n// styles\r\nconst FacebookWrapper = styled(Button)({\r\n    padding: 8,\r\n    background: 'rgba(66, 103, 178, 0.2)',\r\n    '& svg': {\r\n        color: '#4267B2'\r\n    },\r\n    '&:hover': {\r\n        background: '#4267B2',\r\n        '& svg': {\r\n            color: '#fff'\r\n        }\r\n    }\r\n});\r\n\r\nconst TwitterWrapper = styled(Button)({\r\n    padding: 8,\r\n    background: 'rgba(29, 161, 242, 0.2)',\r\n    '& svg': {\r\n        color: '#1DA1F2'\r\n    },\r\n    '&:hover': {\r\n        background: '#1DA1F2',\r\n        '& svg': {\r\n            color: '#fff'\r\n        }\r\n    }\r\n});\r\n\r\nconst LinkedInWrapper = styled(Button)({\r\n    padding: 8,\r\n    background: 'rgba(14, 118, 168, 0.12)',\r\n    '& svg': {\r\n        color: '#0E76A8'\r\n    },\r\n    '&:hover': {\r\n        background: '#0E76A8',\r\n        '& svg': {\r\n            color: '#fff'\r\n        }\r\n    }\r\n});\r\n\r\n// ==============================|| USER PROFILE CARD ||============================== //\r\n\r\nconst UserProfileCard = ({ avatar, name, profile, role, status }) => {\r\n    const theme = useTheme();\r\n    const avatarProfile = avatar && avatarImage(`./${avatar}`).default;\r\n    const imageProfile = profile && avatarImage(`./${profile}`).default;\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50],\r\n                border: theme.palette.mode === 'dark' ? 'none' : '1px solid',\r\n                borderColor: theme.palette.grey[100],\r\n                textAlign: 'center'\r\n            }}\r\n        >\r\n            <CardMedia component=\"img\" image={imageProfile} title=\"Slider5 image\" sx={{ height: '125px' }} />\r\n            <CardContent sx={{ p: 2, pb: '16px !important' }}>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={gridSpacing}>\r\n                            <Grid item xs={12}>\r\n                                <Avatar alt={name} src={avatarProfile} sx={{ width: 72, height: 72, m: '-50px auto 0' }} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12} alignItems=\"center\">\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h4\">{name}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"body2\">{role}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                {status === 'Active' ? (\r\n                                    <Chip\r\n                                        label=\"Active\"\r\n                                        size=\"small\"\r\n                                        sx={{\r\n                                            bgcolor: theme.palette.mode === 'dark' ? theme.palette.dark.dark : 'success.light',\r\n                                            color: 'success.dark'\r\n                                        }}\r\n                                    />\r\n                                ) : (\r\n                                    <Chip\r\n                                        label=\"Rejected\"\r\n                                        size=\"small\"\r\n                                        sx={{\r\n                                            bgcolor: theme.palette.mode === 'dark' ? theme.palette.dark.dark : 'error.light',\r\n                                            color: 'error.dark'\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={4}>\r\n                                <FacebookWrapper fullWidth>\r\n                                    <FacebookIcon />\r\n                                </FacebookWrapper>\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TwitterWrapper fullWidth>\r\n                                    <TwitterIcon />\r\n                                </TwitterWrapper>\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <LinkedInWrapper fullWidth>\r\n                                    <LinkedInIcon />\r\n                                </LinkedInWrapper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button variant=\"outlined\" fullWidth startIcon={<ChatBubbleTwoToneIcon />}>\r\n                            Message\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nUserProfileCard.propTypes = {\r\n    avatar: PropTypes.string,\r\n    name: PropTypes.string,\r\n    profile: PropTypes.string,\r\n    role: PropTypes.string,\r\n    status: PropTypes.string\r\n};\r\n\r\nexport default UserProfileCard;\r\n"],"sourceRoot":""}